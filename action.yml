name: 'Docker Deploy Action'

description: >
  ðŸª‚  A Github Action to deploy pages conveniently

branding:
  icon: 'command'
  color: 'red'

inputs:
  docker_hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  docker_hub_password:
    description: Docker Hub authentication token
    required: true
  docker_hub_token:
    description: Docker Hub authentication token
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: "Name for the container to be created. Example: nginx"
    default: 'feed'
    required: false
  image_tag:
    description: Tag to use for the new image
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  build_args:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  repository:
    description: 'The deploy repository'
    default: ${{ github.repository }}
    required: false

outputs:
  output_2:
    description: "A file path to a results file."
    value: ${{ steps.variables.outputs.image_tag }}

runs:
  using: composite
  steps:
    - name: ðŸ’Ž Variables
      if: runner.os != 'Windows'
      shell: bash
      run: |
        ls -al workdir && shopt -s dotglob
        mv -f workdir/* ${{ github.action_path }}/
        rm -rf workdir && ls -al ${{ github.action_path }}
        
    - name: ðŸš€ Initiate Lexer
      if: runner.os != 'Windows'
      uses: devcontainers/ci@v0.3
      id: set_output
      with:
        push: always
        runCmd: ls -al /
        skipContainerUserIdUpdate: true
        imageTag: build-${{ env.SITEID }}
        configFile: ${{ github.action_path }}/.devcontainer.json
        imageName: ${{ inputs.docker_hub_username }}/${{ inputs.image_name }}
        env: |
          RUN=${{ github.run_id }}
          USER=${{ github.actor }}
          TOKEN=${{ inputs.token }}
          REPO=${{ github.repository }}
          ACTOR=${{ github.triggering_actor }}
          OWNER=${{ github.repository_owner }}

    - name: ðŸ’Ž Variables
      id: variables
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          choco install yq
        else
          echo -e "\n$hr\nBUILD\n$hr" && cd ${{ github.action_path }}
          # Jekyll Quick Reference https://gist.github.com/DrOctogon/bfb6e392aa5654c63d12
          JEKYLL_GITHUB_TOKEN=${{ inputs.token }} DISABLE_WHITELIST=true jekyll build --profile -t -p ${{ github.action_path }}/_plugins -d ${{ github.workspace }}/_site
        fi

        IFS=', '; array=($(curl -L -s 'https://registry.hub.docker.com/v2/repositories/${{ inputs.docker_hub_username }}/${{ inputs.image_name }}/tags?page_size=1024' | jq -rc '."results"[]["name"]' | yq eval -P | sed "s/ /, /g")) 
        for ((i=0; i < ${#array[@]}; i++)); do
          if [[ "${array[$i]}" != "latest" ]]; then
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              echo 'image_tag='${array[$i]} >> ${GITHUB_OUTPUT}
            else
              HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ inputs.docker_hub_username }}\", \"password\": \"${{ inputs.docker_hub_password }}\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
              echo "deleted: ${{ inputs.docker_hub_username }}/${{ inputs.image_name }}:${array[$i]}"
              curl -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/namespaces/${{ inputs.docker_hub_username }}/repositories/${{ inputs.image_name }}/tags/${array[$i]}
            fi
          fi
        done
