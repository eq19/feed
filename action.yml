name: Build devcontainer
description: Build a devcontainer that is compliant with the spec

branding:
  icon: "activity"
  color: "green"

inputs:
  docker_hub_username:
    description: Username for Docker Hub
    required: true
  docker_hub_token:
    description: Docker Hub authentication token
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: "Name for the container to be created. Example: nginx"
    required: true
  image_tag:
    description: Tag to use for the new image
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  build_args:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new

runs:
  using: composite
  steps:
    # Ref: https://stackoverflow.com/a/47018417/4058484
    - name: ðŸª‚ Setup Dockerfile
      shell: bash
      run: |
        cat << EOL >> Dockerfile
        FROM jekyll/jekyll:latest
        LABEL version=v0.0.1

        ADD . /maps

        ENV GIT_DISCOVERY_ACROSS_FILESYSTEM=1
        ENV PATH=${PATH}:/maps/_plugins/scripts
        ENV BUNDLE_GEMFILE=/maps/_plugins/Gemfile

        # RUN apk update && apk upgrade
        RUN chmod -R +x /maps/_plugins/scripts
        RUN apk add -U bash curl github-cli jq yq
        RUN bundle install &>/dev/null && bundle add webrick

        ENTRYPOINT ["entrypoint.sh"]        
        EOL

    - name: ðŸª‚ Setup DevContainer
      shell: bash
      run: |
        cat << EOL >> .devcontainer.json
        {
        	"name": "Python 3"
        	"build": {
        		"dockerfile": "Dockerfile",
        		//"context": "..",
        		"args": {
        			// Update 'VARIANT' to pick a Python version: 3, 3.11, 3.10, 3.9, 3.8
        			// Append -bullseye or -buster to pin to an OS version.
        			// Use -bullseye variants on local on arm64/Apple Silicon.
        			"VARIANT": "3.12-bookworm",
        		}
        	},

        	// Configure tool-specific properties.
        	"customizations": {
        		// Configure properties specific to VS Code.
        		"vscode": {
        			// Set *default* container specific settings.json values on container create.
        			"settings": {
        				"python.defaultInterpreterPath": "/usr/local/bin/python",
        				"python.linting.enabled": true,
        				"python.formatting.blackPath": "/usr/local/py-utils/bin/black",
        				"python.linting.mypyPath": "/usr/local/py-utils/bin/mypy"
        			},

        			// Add the IDs of extensions you want installed when the container is created.
        			"extensions": [
        				"ms-python.python",
        				"ms-python.vscode-pylance"
        			]
        		}
        	},

         	// Use 'forwardPorts' to make a list of ports inside the container available locally.
        	// "forwardPorts": [],

        	// Comment out to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
        	//"remoteUser": "vscode",

        	// Use 'postCreateCommand' to run commands after the container is created.
        	//"postCreateCommand": "cat /etc/supervisor/supervisord.conf && cat /etc/supervisor/conf.d/supervisord.conf"
        	"postCreateCommand": "ls -al /"

        }
        EOL

    - name: ðŸš€ Initiate Lexer
      uses: eq19/eq19.github.io@main
      with:
        token: ${{ inputs.token }}
        pre_build_container: 'eq19/setup'
