name: Build devcontainer
description: Build a devcontainer that is compliant with the spec

branding:
  icon: "activity"
  color: "green"

inputs:
  docker_hub_username:
    description: Username for Docker Hub
    required: true
  docker_hub_token:
    description: Docker Hub authentication token
    required: true
  token:
    description: 'The deploy token'
    required: false
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: "Name for the container to be created. Example: nginx"
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  build_args:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new

runs:
  using: composite
  steps:
    - name: ðŸš€ Initiate Lexer
      if: runner.os != 'Windows'
      uses: devcontainers/ci@v0.3
      with:
        push: always
        runCmd: ls -al /
        #runCmd: make ci-build
        #runCmd: service postgresql start
        skipContainerUserIdUpdate: true
        cacheFrom: tcardonne/github-runner
        imageName: ${{ inputs.image_name }}
        imageTag: build-${{ github.run_number }}
        configFile: /home/runner/work/_actions/eq19/feed/v3/.devcontainer.json

    - name: ðŸ’Ž Variables
      if: runner.os != 'Windows'
      id: variables
      shell: bash
      run: |
        IFS=', '; array=($(curl -L -s 'https://registry.hub.docker.com/v2/repositories/${{ inputs.image_name }}/tags?page_size=1024'|jq -rc '."results"[]["name"]'))
        for ((i=0; i < ${#array[@]}; i++)); do
          if (( $i == 0 )); then echo "IMAGE_TAG=${array[$i]}" >> $GITHUB_ENV; fi
          HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ inputs.docker_hub_username }}\", \"password\": \"${{ inputs.docker_hub_password }}\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/namespaces/eq19/repositories/prime/tags/${array[$i]}
        done
